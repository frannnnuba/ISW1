(DISCLAIMER NO ESTAN EN ORDEN)
FAIL FAST (Jim Shore): no hacer codigo que se consturye alrededor de errores en vez de enfrentarlos directamente, hay que hacer que falle lo antes posible 
fail-fast fundamentals: usar assertions para que salte la excepcion, si es con alguna descripcion mejor, cuando hay comentarios o te dan ganas de comentar un metodo hay que reemplazar eso por un assertion,
evitar assertions sobre un metodo especifico y hacerlo sobre como el sistema falla para ese metodo mejor.
writing assertions: hay que escribirlos lo mas cerca posible del error mismo, usa una reglas del 'pulgar' basicamente si el sistema falla rapido solo no hace nada, caso contrario lo hace fallar rapido para 
que salte la assertion.
eliminate the debugger: el mensaje del assertion deberia eliminar el uso del debugger, basicamente tenes que evitar repetir la condicion del assert y dar la suficiente info para enteder cual es el error
sin meterte al stack. No hace falta que sea user-friendly es para los programadores.
Robust failure: no temer al hacer la excepcion por miedo al cliente, se puede ir a un punto medio entre evitar esto y crashear(nunca debe pasar), algo como reportar el error y seguir ejecutando otros 
comandos o algun punto medio que le avise al programador de este error, pues se le escapo a su testing si le aparece a un usuario. Esto seria un global exception handler.
Finalmente si estas trabajando con archivos externos o cosas asi hay que asegurarse de cerrarlos mas alla de la falla, meter un global exc handler y sacar los catch exception locales, junto con
assertions es la esencia de esta tecnica de fail fast.

PATTERN ABUSER(Mahesh Dohani): arranca diciendo que era un programador ineficiente y enfocado en que tenia una funcionalidad a agregar a un sistema y se trababa
y no era bueno. Llega un compañero y le propone el Gang of Four design pattern book prometiendo ser la solucion de todo diseño y que los llevaria a "los 
sistemas bien diseñados y reutilizabilidad.El pensaba que programar y diseñar son alguna especie de opuestos, y que con estos patrones dejo de programar para
diseñar; lo que es mas se aprendio de memoria todos los patrones y los aplico en todo. 
Llevo a que todos usen patrones y se agarro superioridad sobre los 'programadores', dice que la cantidad de patrones deberian ser una medida para la reusabilidad.
Patron para aplicar patrones: 
1 For the instance variables , State pattern
2 For each method apply strategy pattern
3 For a groupong of instances, apply the chain responsabilty pattern
4 For a groupong of instances, apply the compsoite, iterator and visitor pattern.
5 for clients of objets, apply observer pattern.
6 for clients of objects, apply the proxy pattern 
7 for each hierarchy of objects, apply facade pattern
8 for legacgy objectes, apply adapter pattern
9 for creating objects as part of a family, apply the abstract factory, builder, and factoey methods pattern
10 for creating similiar objects, prototype pattern.
Final: el aplicar patron tras patron hizo que sus sistemas no sean entendibles por otros, y a la hora de hacer cambios esto no es organico en el modelo,
necesitando mas patrones para hacerlo. Se pregunta si despues de haber hecho todo esto realmente mejoro la reusabilidad, si aplicar el patron mejora la resolucion
(y que siquiera implica mejor para esto). 

Was computing dumbed down by the arrival of computer science in academia?(Alan Kay):
Al principio piensa que no pues en los 60s todo se hacia en universidades pero pocas, luego se extendio a todas las universidades prometiendo en 4 años una
carrera de grado, esto le hecha la culpa a los baby boomers y dice que se debe a que quieren ver a las universidades como mercados mas que lugares de investigacion.
Dice que las universidades se dejan llevar por hacer 'vocacion entrenada' en vez de entendimiento academico, ademas de sucumbir a presiones del mercado en 
base a necesitar cierta tecnologia y ser eso lo enseñado en vez de tener su propio criterio (las universidades) sobre que son 'ciencias de computar' y 
'practicas ingenieriles para software'. Dice que cuando estuvo en universidades no veia que se enseñara como una ciencia y resalta que no hay ni perspectiva
ni curiosidad intelectual.
Dice que no se tiene en cuenta la parte de ciencia en ciencias de la computacion y que todos lo describen mas parecido a algo de ingenieria,
Culpa a las universidades de 'atontar'(dumb down' las ciencias de la computacion cuando las universidades deberian ocuparse de no dejar que pase esto,
y culpa al mercado de ser tonto al nivel 'Dunning-kruger' (efecto en el que alguien tiene mayor estima en su conocimiento de un tema del que realmente tiene) 
y llevo esta ignorancia al publico en general, en especifico la educacion en todos sus niveles.
 Dice que en los 60s se pensaba a la cs como una aspiracion y una pregunta, en vez de algo resuelto.
Dice que en las ciencias se intenta modelar a traves de reglas (y matematica) un entendimiento del tema que permita teorizar mejor sobre el y mejorar
su entendimiento general.
Menciona que cs es la ciencia de los sistemas, todos los sistemas. Los algoritmos demas son una pequeña parte de computar, computar es entender, crear y 
construir sistemas. Menciona que a veces la matematica necesaria no esta inventada para la cs, y que en parte de descubrirla se puede usar una computadora
por eso puede pensarse que la computadora es 'meta' pues se puede usar para generar modelos de ella misma(Acordarse que en ingles es computer science)
Dice que pudieron ser creativos con xerox porque porque pensaban en 'sistemas de procesos'.

Modern Software Engineering(David Farley):
El desarrollo de software es un proceso de descubrimiento y exploracion, por ello para ser buenos ingen de soft hay que ser buenos en aprender.
Dice que hay que tomar en cierto modo el metodo cientifico para construir software, podemos avanzar en bases que limitan variables y nos permiten
descartar malas ideas mas facilmente. Esto nos permite movernos en direcdcion a sistemas y codigos mas deterministicos, este enfoque pragmatico del
metodo cientifico es lo que define como ingenieria.
Ingenieria de software: es la aplicacion de una forma cientifica-empirica, de encontrar soluciones economicas y eficientes a problemas practicos de software.
El abordaje ingenieril es importante por dos cosas: priemro el des de soft es siempre un descubrimiento, entonces para lo segundo que es ser economicos y 
eficientes nuestra habilidad de aprender debe ser sustentable.
Expertos en aprender: 
1) iteracion 2) feedback 3) incrementabilidad 4) experimentacion 5) empirisismo 
Seguir estos pasos nos lleva a construir software de manero evolutiva  incluso cuando las respuestas al sistema son todavia inciertas, lo cual lleva a..
Expertos en manejar complejidad: 1) Modularidad 2) Cohesion 3) Discernir preocupaciones 4) Abstraccion 5) Acoplamiento debil
Estas son las ideas para manejar software, y algunas ideas practicas que menciona son:
1) Testeabilidad 2) Implementabilidad 3) Velocidad 4) Control de variables 5)entrega continua
Se refiere a la ciencia como el canal para mejorar ideas buenas y no caer en malas ideas previas, y el aplicar estas esructuras conocimientos teorizaciones etc
en problemas especificos es la ingeniera.
En los 60 se definio por primera vez el software y al poco tiempo entro en crisis porque no escalaba tan rapido como el hardware, se plantearon las sig.
observaciones ( brooks silver bullet) en esencia el software no crece lento es el hardware que crece rapido.
Describe que el pensar a la ingenieria de software como planteaba antes implica un cambio de paradigma, y que deberia ser natural ver las ventajas del enfoque 
propuesto.
2 QUE ES LA INGENIERIA?
Diferencia en principio la ingenieria de produccion de la de diseño, la primera es la que debe atacar situaciones concretas, fisicas y que deben adaptarse de mejor
forma a un cierto contexto que en cierto modo lo define, la segunda en cambio se desenvuelve de estos problemas.
Compara como para otras disciplinas el problema en eficiencia viene desde la produccion, todo lo que sea relativo a un diseño es rapido y no tan costoso como
poner en marcha toda una linea de ensamblaje etc. en el desarrollo de software consideramos el desarrollo como gratis, pues para empezar la produccion no hay
mas que 'presionar el boton' de empezar a construir, lo cual lo hace sumamente escalable. Pensar el desarrollo de software como produccion es un error 
(pensar en casacada en vez de iterativo incremental).
Ingenieria de diseño: nuestro campo permite los cambios de manera efectiva y sin mayores costos pues trabajamos con lo que sera el producto final (analogia
puentes), el problema de crear se desprende de todo lo que es de produccion, y lo que se busca es poder llevar a nuestra profesion a una cierta clase de
profesion tecnica, siendo necesario poder usar la ciencia para crear modelos, y no como un capricho o algo ajeno a la actividad y verlo como algo ajeno
al desarrollo, pues buscar una precision matematica en estos casos no es totalmente necesario.
Hablando de matematicas como ingenieria: primero habla de los metodos formales (codigo que tra una autovalidacion matematica) problema: ataca la productividad,
no es facil de generar y al final termina empeorando el desarrollo; luego compara como las industrias aeroespaciales son pragmaticas y empiricas basadas en 
modelos ayudados lo maximo posible por matematicas, pero imposibles de saber si son eficientes sin probar, luego lo relaciona al software diciendo
que  nuestros dominios de problemas si son acotados pueden ser demostrados formalmente, pero al crecer las variables se vuelve necesario adoptar un enfoque 
como el aeroespacial para crecer el software iterativamente.
Vandenburg define a la ingenieria como 'las cosas que funcionan' haciendo alusion a las practicas que permiten un mejor desarrollo de software (bardea a la
ingenieria academica que no facilita esto) y que un enfoque que no ayuda al descubrimiento y solo a la produccion no se debe considerar ingenieria de soft.
Primer definicion de ing de soft: Habla de que Hamilton creaba software que no siempre podia testear (software para aeroespaciales) pero siempre intentaba 
conseguir hacer fallar todo para aprender que causaba los errores y prevenirlo a futuro, esto es la ingenieria empirica en esencia, incluso si algunos errores 
se le escapaban hasta su puesta en marcha.
El otro principio importante para Hamilton era el de 'fallar seguramente' que significa que aunque haya errores igual se pueda tener progreso.
Working definition: the application of an empirical, scientific approach to finding efficient,economic solutions to practical problems.
Engineering != Code
Capitulo 3 
Fundamentos para ser ingenieria de software: para poder elegir un grupo de ideas practicas etc que se puedan considerar ing. de soft estas ideas deben ser 
esenciales al desarrollo de soft y robustas al cambio.
Industria de cambio? Plantea que la profesion no aprende y se enrozca en lo que parecen ser avances, plantea que muchas veces parece haber avance pero es una 
consecuencia de donde corremos nuestro codigo mas que un avance de software en si (avanza el hardware lo que hace que parezca que avanza el soft), plantea que
vivio solamente dos veces un cambio importante que fue cuando cambio de assembler a C y cuando empezo a usar OOP. Plantea que los cambios de paradigmas puedem
llevar a estos incrementos buscados pero en un ritmo lento y no en el x10 buscado realmente, pero si puede darse el proceso inverso de decrementos en -x10
pues crear nuevos softwares e incorporar nuevas ideas no solo les parece casi imposible, si no que no pueden desprenderse de viejas ideas por mas descartadas 
que estas esten con el paso del tiempo.
Medidas de performance: no tenemos a priori pareciera medidas de productividad ya sean de equipos de desarrolladores de soft(descarta velocidad o 
cosas como largo del codigo producido). Por un estudio menciona que hay dos factores claves en equipos de desarrolladores mas exitosos (no explica causalidad
solo estadisticas) y estos dos factores son la estibilidad y el rendimiento. Estas estadisticas dicen que si seguis practicas tenes continuous delivery y si
se dividen en pequeños grupos se consigue el hig performance.
Para medir la stability: la tasa con la que se introduce un error en el desarrollo, y la tasa con la que se sigue adelante luego de un error en el proceso.
La medicion de estabilidad no da certezas sobre que se este construyendo lo correcto, pero si sobre si se esta construyendo correctamente y la calidad de
lo que se construye.
Para medir el rendimiento: plazo de entrega, y frecuencia. Cuanto tiempo lleva una idea ir de una linea de codigo del  estilo aca deberia ir esto a un coigo
que efectivamente realiza lo que se desea, y cada cuanto se dan estos cambios. 
Parece dejar ciertos huecos sobre que lo que se construye sea correcto, pero al menos sirve para demostrar lo que dijimos antesy tienen correlacion una con
la otra, los equipos eficientes son estables y producen mas rapido software, y un feedback rapido mejora la estabilidad del software.
Declara que la vara con la que  medir los cambios al software y los procesos  son la estibilidad y el rendimiento, (agregar esto afecta mi est o rendim? 
si cambio este proceso por aquel otro que es mas lento mejora la estabilidad? (Recordar que se dan feedback entre si, no sirve algo estable pero que toma 
mil años y ya no es realista al dominio del problema, ni al reves).
Foundations of a Software Engineering Discipline: vuelve a mencionar las dos competencias principales, osea expertos en aprender y expertos en manejar complejidad

Lectura de patrones en  Design Patterns Smalltalk Companion 
Decorator: agregar funcionalidad dinamicamente a un objeto sin necesidad de subclasificar.
Un decorador se diferencia de un componente concreto del objeto decorado, en cambio este decorador es polimorfico pero no esencial al objeto, por lo tanto 
no se nota diferencia para el usuario en si. La forma de reconocer una clase de decorator es que tiene una unica variable de instancia, que es del mismo tipo 
del decorador, y el decorador delega su implementacion a esta variable de instancia agregando algo de funcionalidad mientras tanto.
La clase actua como un wrapper, que no hace mucho mas que solamente declarar esta variable de instancia, pero es esta la que va a redefinir la gran mayoria de
cosas y le permite al decorador redefinir y agregar comportamiento.
Smalltalk combina la clase concreteComponent y component en su decorator. Esto puede dar problemas porque agregar funcionalidad en component agrega tambien 
funcionalidad a los decoradores.
